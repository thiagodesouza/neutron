(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{100:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return d})),n.d(t,"default",(function(){return u}));var a=n(1),o=n(6),r=(n(0),n(115)),c={id:"add-duck",title:"How to create a new Duck?",sidebar_label:"Create Duck"},s={id:"commands/add-duck",title:"How to create a new Duck?",description:'Thinking about how to organize our `actions`, `reducers` and `types`, we decided to use <a href="https://github.com/erikras/ducks-modular-redux" target="_blank">Duck Modular Redux</a> due to the creation of a compact file with everything we need to work with redux.',source:"@site/docs/commands/add-duck.md",permalink:"/docs/commands/add-duck",sidebar_label:"Create Duck",sidebar:"docs",previous:{title:"How to create a new Component?",permalink:"/docs/commands/add-component"},next:{title:"How to create a new Page?",permalink:"/docs/commands/add-page"}},d=[{value:"Usage command example",id:"usage-command-example",children:[]},{value:"Combine Reducers",id:"combine-reducers",children:[]}],i={rightToc:d};function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Thinking about how to organize our ",Object(r.b)("inlineCode",{parentName:"p"},"actions"),", ",Object(r.b)("inlineCode",{parentName:"p"},"reducers")," and ",Object(r.b)("inlineCode",{parentName:"p"},"types"),", we decided to use ",Object(r.b)("a",{href:"https://github.com/erikras/ducks-modular-redux",target:"_blank"},"Duck Modular Redux")," due to the creation of a compact file with everything we need to work with redux."),Object(r.b)("p",null,"To create a new duck, you need to stay at the root of the project and enter this command in your terminal:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"neutron add:duck <duckName>\n")),Object(r.b)("h2",{id:"usage-command-example"},"Usage command example"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"neutron add:duck tools\n")),Object(r.b)("p",null,"After the execution, this command will create a new file in ",Object(r.b)("inlineCode",{parentName:"p"},"./src/store/ducks"),"."),Object(r.b)("h4",{id:"example"},"Example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"/* #FILE: ./src/store/ducks/tools.js */\nimport { createReducer, createActions } from 'reduxsauce';\nimport Immutable from 'seamless-immutable';\n\n/* Types & Action Creators */\n\nconst { Types, Creators } = createActions({\n  getToolsRequest: [],\n  getToolsSuccess: ['data'],\n  getToolsFailure: [],\n});\n\nexport const ToolsTypes = Types;\nexport default Creators;\n\n/* Initial State */\n\nexport const INITIAL_STATE = Immutable({\n  loading: false,\n  data: [],\n  error: false,\n});\n\n/* Reducers */\n\nconst getToolsRequest = (state) => state.merge({\n  ...state,\n  loading: true,\n});\n\nconst getToolsSuccess = (state, { data }) => state.merge({\n  data,\n  loading: false,\n  error: false,\n});\n\nconst getToolsFailure = (state) => state.merge({\n  ...state,\n  error: true,\n  loading: false,\n});\n\n/* Reducers to types */\n\nexport const reducer = createReducer(INITIAL_STATE, {\n  [Types.GET_TOOLS_REQUEST]: getToolsRequest,\n  [Types.GET_TOOLS_SUCCESS]: getToolsSuccess,\n  [Types.GET_TOOLS_FAILURE]: getToolsFailure,\n});\n\n")),Object(r.b)("h2",{id:"combine-reducers"},"Combine Reducers"),Object(r.b)("p",null,"This step is very important to combine your ",Object(r.b)("inlineCode",{parentName:"p"},"reducers")," with a unique reducer called ",Object(r.b)("inlineCode",{parentName:"p"},"rootReducer"),"."),Object(r.b)("h4",{id:"example-1"},"Example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"/* #FILE: ./src/store/ducks/index.js */\nimport { combineReducers } from 'redux';\n\nimport { reducer as tools } from './tools';\n\nconst reducers = combineReducers({\n  default: () => [], // => remove this\n  tools,\n});\n\nexport default reducers;\n\n")),Object(r.b)("p",null,"This setting is required to configure the reducer in ",Object(r.b)("inlineCode",{parentName:"p"},"store")," and you can check the creation of ",Object(r.b)("inlineCode",{parentName:"p"},"store")," in ",Object(r.b)("inlineCode",{parentName:"p"},"./src/store/index.js"),". All the settings are already made especially for you!"))}u.isMDXComponent=!0}}]);