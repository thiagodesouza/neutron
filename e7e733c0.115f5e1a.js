(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{106:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return r})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return i}));var a=n(1),o=n(6),s=(n(0),n(115)),c={id:"add-page",title:"How to create a new Page?",sidebar_label:"Create Page"},r={id:"commands/add-page",title:"How to create a new Page?",description:"The `page` is like a `component`, but we prefer to think that components don't need to know the application state directly, because the change of state should be responsability of the pages.",source:"@site/docs/commands/add-page.md",permalink:"/docs/commands/add-page",sidebar_label:"Create Page",sidebar:"docs",previous:{title:"How to create a new Duck?",permalink:"/docs/commands/add-duck"},next:{title:"How to create a new Saga?",permalink:"/docs/commands/add-saga"}},p=[{value:"Usage command example",id:"usage-command-example",children:[]},{value:"Connecting the Page with Store",id:"connecting-the-page-with-store",children:[]}],l={rightToc:p};function i(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"page")," is like a ",Object(s.b)("inlineCode",{parentName:"p"},"component"),", but we prefer to think that components don't need to know the application state directly, because the change of state should be responsability of the pages."),Object(s.b)("p",null,"To create a new page, you need to stay at the root of the project and enter this command in your terminal:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"neutron add:page <pageName>\n")),Object(s.b)("p",null,"You don't need to inform the ",Object(s.b)("inlineCode",{parentName:"p"},"technology")," because the CLI reads your ",Object(s.b)("inlineCode",{parentName:"p"},"package.json")," to identify the project type. This is awesome, isn't it?"),Object(s.b)("h2",{id:"usage-command-example"},"Usage command example"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"neutron add:page Tools\n")),Object(s.b)("p",null,"After the execution, this command will create a new folder in ",Object(s.b)("inlineCode",{parentName:"p"},"src/pages")," with two new files: ",Object(s.b)("inlineCode",{parentName:"p"},"index.js")," and ",Object(s.b)("inlineCode",{parentName:"p"},"styles.js"),"."),Object(s.b)("h4",{id:"example"},"Example:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"/* #FILE: ./src/pages/Tools/index.js */\nimport React, { useState, useEffect } from 'react';\nimport { StyledContainer } from './styles';\n\nfunction Tools() {\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    setMessage('Tools page!');\n  }, []);\n\n  return (\n    <StyledContainer>\n      <h1>{message}</h1>\n    </StyledContainer>\n  );\n}\n\nexport default Tools;\n")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"/* #FILE: ./src/pages/Tools/styles.js */\nimport styled from 'styled-components';\n\nimport colors from '@/styles/colors';\n\nexport const StyledContainer = styled.div`\n  background-color: ${colors.background};\n  color: ${colors.primary};\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  justify-content: center;\n`;\n")),Object(s.b)("h2",{id:"connecting-the-page-with-store"},"Connecting the Page with Store"),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"Consider using the ",Object(s.b)("inlineCode",{parentName:"p"},"useSelector")," and ",Object(s.b)("inlineCode",{parentName:"p"},"useDispatch")," hooks.\nTo learn more, check ",Object(s.b)("a",{href:"https://react-redux.js.org/api/hooks",target:"_blank"},"React Redux - Hooks")," and skip next steps.")),Object(s.b)("p",null,"To connect the page with store, you should import these references on the ",Object(s.b)("inlineCode",{parentName:"p"},"index.js")," file:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport ToolsActions from '@/store/ducks/tools'; // example\n")),Object(s.b)("p",null,"The next step is map the ",Object(s.b)("inlineCode",{parentName:"p"},"state")," and ",Object(s.b)("inlineCode",{parentName:"p"},"dispatchs")," to properties of the page and replace ",Object(s.b)("inlineCode",{parentName:"p"},"export default Tools"),", just like this:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const mapStateToProps = state => ({\n  tools: state.tools, // example\n});\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(ToolsActions, dispatch); // example\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Tools);\n")),Object(s.b)("p",null,"Now, you can use all properties mapped in your page:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function Tools({ tools, getToolsRequest }) { // example\n  // ...\n}\n")))}i.isMDXComponent=!0}}]);