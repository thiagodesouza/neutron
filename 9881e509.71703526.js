(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{103:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return r})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return d}));var o=a(1),n=a(6),s=(a(0),a(115)),r={id:"add-saga",title:"How to create a new Saga?",sidebar_label:"Create Saga"},c={id:"commands/add-saga",title:"How to create a new Saga?",description:"To create a new saga, you need to stay at the root of the project and enter this command in your terminal:",source:"@site/docs/commands/add-saga.md",permalink:"/docs/commands/add-saga",sidebar_label:"Create Saga",sidebar:"docs",previous:{title:"How to create a new Page?",permalink:"/docs/commands/add-page"},next:{title:"Contributing",permalink:"/docs/community/contributing"}},l=[{value:"Usage command example",id:"usage-command-example",children:[]},{value:"Register Sagas",id:"register-sagas",children:[]}],i={rightToc:l};function d(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(s.b)("wrapper",Object(o.a)({},i,a,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"To create a new saga, you need to stay at the root of the project and enter this command in your terminal:"),Object(s.b)("pre",null,Object(s.b)("code",Object(o.a)({parentName:"pre"},{className:"language-shell"}),"neutron add:saga <sagaName>\n")),Object(s.b)("h2",{id:"usage-command-example"},"Usage command example"),Object(s.b)("pre",null,Object(s.b)("code",Object(o.a)({parentName:"pre"},{className:"language-shell"}),"neutron add:saga tools\n")),Object(s.b)("p",null,"After the execution, this command will create a new file in ",Object(s.b)("inlineCode",{parentName:"p"},"./src/store/sagas")," and, if it does not exists, will also create a new file in ",Object(s.b)("inlineCode",{parentName:"p"},"./src/store/ducks"),"."),Object(s.b)("h4",{id:"example"},"Example:"),Object(s.b)("pre",null,Object(s.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"/* #FILE: ./src/store/sagas/tools.js */\nimport { call, put } from 'redux-saga/effects';\nimport api from '@/services/api';\n\nimport ToolsActions from '@/store/ducks/tools';\n\nexport function* getToolsRequest() {\n  try {\n    const endpoint = '/tools';\n    const { data } = yield call(api.get, endpoint);\n    yield put(ToolsActions.getToolsSuccess(data));\n  } catch (error) {\n    console.log(error);\n    yield put(ToolsActions.getToolsFailure());\n  }\n}\n")),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"For more information about ",Object(s.b)("inlineCode",{parentName:"p"},"ducks"),", check: ",Object(s.b)("a",{href:"add-duck",target:"_blank"},"How to create a new Duck?"),".")),Object(s.b)("h2",{id:"register-sagas"},"Register Sagas"),Object(s.b)("p",null,"This step is very important to register your ",Object(s.b)("inlineCode",{parentName:"p"},"sagas")," to listen all calls related to the configured ",Object(s.b)("inlineCode",{parentName:"p"},"types"),"."),Object(s.b)("pre",null,Object(s.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"/* #FILE: ./src/store/ducks/sagas.js */\nimport { all, takeLatest } from 'redux-saga/effects';\n\nimport { ToolsTypes } from '@/store/ducks/tools'; // example\nimport { getToolsRequest } from './tools'; // example\n\nexport default function* rootSaga() {\n  yield all([\n    takeLatest(ToolsTypes.GET_TOOLS_REQUEST, getToolsRequest), // example\n  ]);\n}\n")),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"We decided to use ",Object(s.b)("inlineCode",{parentName:"p"},"takeLatest")," to ensure that only the last call is executed. For more information on other options, you can check the ",Object(s.b)("a",{href:"https://redux-saga.js.org/docs/api/",target:"_blank"},"Redux-Saga - API Reference"))))}d.isMDXComponent=!0}}]);